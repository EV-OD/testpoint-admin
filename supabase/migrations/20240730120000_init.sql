-- Drop existing objects in reverse order of dependency
DROP POLICY IF EXISTS "Admins can manage tests" ON "public"."tests" CASCADE;
DROP POLICY IF EXISTS "Admins can manage user_groups" ON "public"."user_groups" CASCADE;
DROP POLICY IF EXISTS "Admins can manage groups" ON "public"."groups" CASCADE;
DROP POLICY IF EXISTS "Admins can manage profiles" ON "public"."profiles" CASCADE;
DROP POLICY IF EXISTS "Users can read their own profile" ON "public"."profiles" CASCADE;

DROP FUNCTION IF EXISTS is_admin() CASCADE;

DROP TABLE IF EXISTS "public"."tests" CASCADE;
DROP TABLE IF EXISTS "public"."user_groups" CASCADE;
DROP TABLE IF EXISTS "public"."groups" CASCADE;
DROP TABLE IF EXISTS "public"."profiles" CASCADE;

-- Create is_admin function
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
  RETURN (
    SELECT (auth.jwt() ->> 'user_metadata')::jsonb ->> 'role'
  ) = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create profiles table
CREATE TABLE "public"."profiles" (
    "id" uuid NOT NULL PRIMARY KEY,
    "name" text NOT NULL,
    "email" text NOT NULL,
    "role" text NOT NULL
);

-- Create groups table
CREATE TABLE "public"."groups" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    "name" text NOT NULL
);

-- Create user_groups table (join table)
CREATE TABLE "public"."user_groups" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" uuid NOT NULL REFERENCES "public"."profiles"(id) ON DELETE CASCADE,
    "group_id" uuid NOT NULL REFERENCES "public"."groups"(id) ON DELETE CASCADE,
    CONSTRAINT "user_groups_user_id_group_id_key" UNIQUE ("user_id", "group_id")
);

-- Create tests table
CREATE TABLE "public"."tests" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    "name" text NOT NULL,
    "group_id" uuid NOT NULL REFERENCES "public"."groups"(id) ON DELETE CASCADE,
    "time_limit" integer NOT NULL,
    "question_count" integer NOT NULL,
    "date_time" timestamp with time zone NOT NULL
);

-- Create get_groups_with_member_count function
CREATE OR REPLACE FUNCTION get_groups_with_member_count()
RETURNS TABLE(id uuid, name text, member_count bigint) AS $$
BEGIN
  RETURN QUERY
  SELECT
    g.id,
    g.name,
    COUNT(ug.user_id) as member_count
  FROM
    groups g
  LEFT JOIN
    user_groups ug ON g.id = ug.group_id
  GROUP BY
    g.id, g.name;
END;
$$ LANGUAGE plpgsql;

-- Set up Row Level Security
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."groups" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_groups" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."tests" ENABLE ROW LEVEL SECURITY;

-- Create Policies
CREATE POLICY "Users can read their own profile" ON "public"."profiles"
  FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Admins can manage profiles" ON "public"."profiles"
  FOR ALL USING (is_admin()) WITH CHECK (is_admin());

CREATE POLICY "Admins can manage groups" ON "public"."groups"
  FOR ALL USING (is_admin()) WITH CHECK (is_admin());

CREATE POLICY "Admins can manage user_groups" ON "public"."user_groups"
  FOR ALL USING (is_admin()) WITH CHECK (is_admin());

CREATE POLICY "Admins can manage tests" ON "public"."tests"
  FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Create the default admin user
DO $$
DECLARE
  user_id uuid;
BEGIN
  -- Check if user already exists
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'rabin@ieee.org') THEN
    -- Create the user in auth.users
    INSERT INTO auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, recovery_token, recovery_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, created_at, updated_at, confirmation_token, email_change, email_change_sent_at, confirmed_at)
    VALUES (
      '00000000-0000-0000-0000-000000000000',
      gen_random_uuid(),
      'authenticated',
      'authenticated',
      'rabin@ieee.org',
      crypt('12345678', gen_salt('bf')),
      now(),
      '',
      NULL,
      NULL,
      '{"provider":"email","providers":["email"]}',
      '{"role":"admin"}',
      now(),
      now(),
      '',
      '',
      NULL,
      now()
    ) RETURNING id INTO user_id;

    -- Create the corresponding profile
    INSERT INTO public.profiles (id, name, email, role)
    VALUES (user_id, 'Rabin Admin', 'rabin@ieee.org', 'admin');
  ELSE
     -- If user exists, ensure their profile is correct
     UPDATE public.profiles SET role = 'admin', name = 'Rabin Admin' WHERE email = 'rabin@ieee.org';
  END IF;
END $$;
