
"use client";

import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import type { Question } from '@/lib/types';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { PlusCircle, X } from 'lucide-react';

const optionSchema = z.object({
  text: z.string().min(1, { message: "Option text cannot be empty." }),
});

const questionFormSchema = z.object({
  text: z.string().min(10, { message: "Question must be at least 10 characters." }),
  options: z.array(optionSchema).min(2, { message: "Must have at least two options." }),
  correctOptionIndex: z.string().refine(val => val !== undefined, { message: "You must select a correct answer." }),
});

type QuestionFormValues = z.infer<typeof questionFormSchema>;

interface QuestionFormProps {
  onSave: (question: Omit<Question, 'id'>) => void;
  onClose: () => void;
}

export function QuestionForm({ onSave, onClose }: QuestionFormProps) {
  const form = useForm<QuestionFormValues>({
    resolver: zodResolver(questionFormSchema),
    defaultValues: {
      text: '',
      options: [{ text: '' }, { text: '' }],
      correctOptionIndex: undefined,
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "options",
  });

  const onSubmit = (data: QuestionFormValues) => {
    const finalOptions = data.options.map((opt, index) => ({
      id: `${index}`, // Temp ID, real ID will be generated by backend
      text: opt.text,
      isCorrect: index === parseInt(data.correctOptionIndex, 10),
    }));

    onSave({ text: data.text, options: finalOptions });
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Add New Question</DialogTitle>
          <DialogDescription>
            Author the question, provide multiple-choice options, and select the correct answer.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-6">
            <FormField
              control={form.control}
              name="text"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Question Text</FormLabel>
                  <FormControl>
                    <Textarea placeholder="e.g. What is the capital of France?" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="correctOptionIndex"
              render={({ field }) => (
                <FormItem className="space-y-3">
                  <FormLabel>Options</FormLabel>
                   <RadioGroup
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                    className="flex flex-col space-y-1"
                  >
                    {fields.map((item, index) => (
                      <FormField
                        key={item.id}
                        control={form.control}
                        name={`options.${index}.text`}
                        render={({ field: optionField }) => (
                            <FormItem className="flex items-center space-x-3">
                                <FormControl>
                                  <RadioGroupItem value={`${index}`} />
                                </FormControl>
                                <FormControl>
                                    <Input {...optionField} placeholder={`Option ${index + 1}`} />
                                </FormControl>
                                <Button type="button" variant="ghost" size="icon" onClick={() => remove(index)} disabled={fields.length <= 2}>
                                    <X className="h-4 w-4" />
                                </Button>
                            </FormItem>
                        )}
                      />
                    ))}
                  </RadioGroup>
                   <FormMessage />
                </FormItem>
              )}
            />

            <Button type="button" variant="outline" size="sm" onClick={() => append({ text: '' })}>
              <PlusCircle className="h-4 w-4 mr-2" />
              Add Option
            </Button>
            
            <DialogFooter className='sticky bottom-0 bg-background py-4'>
              <Button type="button" variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button type="submit">Save Question</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
